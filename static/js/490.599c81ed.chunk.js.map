{"version":3,"file":"static/js/490.599c81ed.chunk.js","mappings":"+LAIA,MAAMA,GAAsBC,EAAAA,EAAAA,MAAK,KAC/B,MAAMC,GAAUC,EAAAA,EAAAA,QAAY,OAE5BC,EAAAA,EAAAA,GAAUC,IACJH,EAAQI,UACVJ,EAAQI,QAAQC,SAASC,GAAK,SAIlC,MAAMC,GAASC,EAAAA,EAAAA,SAAQ,KACrB,MACMC,EAAuC,GAC7C,IAAK,IAAIC,EAAI,EAAGA,EAFF,IAEaA,IAAK,CAC9B,MAAMC,EAAIC,KAAKC,SACTC,EAAIF,KAAKC,SACTE,EAAQ,EAAIH,KAAKI,GAAKL,EACtBM,EAAML,KAAKM,KAAK,EAAIJ,EAAI,GACxBK,EAAI,KACJC,EAAID,EAAIP,KAAKS,IAAIJ,GAAOL,KAAKU,IAAIP,GACjCT,EAAIa,EAAIP,KAAKS,IAAIJ,GAAOL,KAAKS,IAAIN,GACjCQ,EAAIJ,EAAIP,KAAKU,IAAIL,GACvBR,EAAIe,KAAK,CAACJ,EAAGd,EAAGiB,GAClB,CACA,OAAOd,GACN,IAEH,OACEgB,EAAAA,EAAAA,MAAA,SAAOC,IAAK1B,EAAQ2B,SAAA,EAElBF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAAC,EAAG,GAAI,OAC9BD,EAAAA,EAAAA,KAAA,wBAAsBE,MAAM,UAAUC,SAAS,UAAUC,kBAAmB,IAAMC,UAAW,GAAKC,UAAW,SAI/GT,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAAC,KAAM,GAAI,OACjCD,EAAAA,EAAAA,KAAA,qBAAmBE,MAAM,UAAUK,WAAS,EAACC,QAAS,GAAKC,aAAW,OAIvE9B,EAAO+B,IAAI,CAACC,EAAG7B,KACde,EAAAA,EAAAA,MAAA,QAAce,SAAUD,EAASZ,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAAC,IAAM,EAAG,MAChCD,EAAAA,EAAAA,KAAA,qBAAmBE,MAAM,cAFhBpB,SA6BnB,GApB6BX,EAAAA,EAAAA,MAAK,KAE9B6B,EAAAA,EAAAA,KAAA,OAAKa,UAAU,wBAAuBd,UACpCF,EAAAA,EAAAA,MAACiB,EAAAA,GAAM,CACLC,OAAQ,CAAEH,SAAU,CAAC,EAAG,EAAG,KAAMI,IAAK,IACtCC,YAAa,CAAEC,IAAK,IACpBC,IAAK,CAAC,EAAG,GAAGpB,SAAA,EAEZC,EAAAA,EAAAA,KAAA,gBAAcoB,UAAW,MACzBpB,EAAAA,EAAAA,KAAA,cAAYY,SAAU,CAAC,EAAG,EAAG,GAAIQ,UAAW,IAAKlB,MAAM,aACvDF,EAAAA,EAAAA,KAAA,cAAYY,SAAU,EAAE,GAAI,GAAI,GAAIQ,UAAW,GAAKlB,MAAM,aAC1DF,EAAAA,EAAAA,KAACqB,EAAAA,SAAQ,CAACC,SAAU,KAAKvB,UACvBC,EAAAA,EAAAA,KAAC9B,EAAS,OAEZ8B,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CAACC,WAAW,EAAOC,YAAY,EAAOC,YAAY,S","sources":["components/ThreeGlobe.tsx"],"sourcesContent":["import React, { useMemo, useRef, memo, Suspense } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\n\r\nconst GlobeMesh: React.FC = memo(() => {\r\n  const meshRef = useRef<any>(null);\r\n\r\n  useFrame((state) => {\r\n    if (meshRef.current) {\r\n      meshRef.current.rotation.y += 0.0025;\r\n    }\r\n  });\r\n\r\n  const points = useMemo(() => {\r\n    const count = 200; // Reduced from 300 for better performance\r\n    const pts: Array<[number, number, number]> = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const u = Math.random();\r\n      const v = Math.random();\r\n      const theta = 2 * Math.PI * u;\r\n      const phi = Math.acos(2 * v - 1);\r\n      const r = 1.02; // slightly above surface\r\n      const x = r * Math.sin(phi) * Math.cos(theta);\r\n      const y = r * Math.sin(phi) * Math.sin(theta);\r\n      const z = r * Math.cos(phi);\r\n      pts.push([x, y, z]);\r\n    }\r\n    return pts;\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={meshRef}>\r\n      {/* Core sphere with neon gradient */}\r\n      <mesh>\r\n        <sphereGeometry args={[1, 32, 32]} />\r\n        <meshStandardMaterial color=\"#0ea5e9\" emissive=\"#00d4ff\" emissiveIntensity={0.25} metalness={0.2} roughness={0.4} />\r\n      </mesh>\r\n\r\n      {/* Wireframe overlay */}\r\n      <mesh>\r\n        <sphereGeometry args={[1.01, 16, 16]} />\r\n        <meshBasicMaterial color=\"#a855f7\" wireframe opacity={0.3} transparent />\r\n      </mesh>\r\n\r\n      {/* Glowing points */}\r\n      {points.map((p, i) => (\r\n        <mesh key={i} position={p as any}>\r\n          <sphereGeometry args={[0.01, 4, 4]} />\r\n          <meshBasicMaterial color=\"#22d3ee\" />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n});\r\n\r\nconst ThreeGlobe: React.FC = memo(() => {\r\n  return (\r\n    <div className=\"absolute inset-0 -z-0\">\r\n      <Canvas \r\n        camera={{ position: [0, 0, 2.6], fov: 50 }}\r\n        performance={{ min: 0.5 }}\r\n        dpr={[1, 2]}\r\n      >\r\n        <ambientLight intensity={0.6} />\r\n        <pointLight position={[5, 5, 5]} intensity={1.2} color=\"#7c3aed\" />\r\n        <pointLight position={[-5, -5, -5]} intensity={0.6} color=\"#22d3ee\" />\r\n        <Suspense fallback={null}>\r\n          <GlobeMesh />\r\n        </Suspense>\r\n        <OrbitControls enablePan={false} enableZoom={false} autoRotate={false} />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ThreeGlobe;\r\n\r\n\r\n"],"names":["GlobeMesh","memo","meshRef","useRef","useFrame","state","current","rotation","y","points","useMemo","pts","i","u","Math","random","v","theta","PI","phi","acos","r","x","sin","cos","z","push","_jsxs","ref","children","_jsx","args","color","emissive","emissiveIntensity","metalness","roughness","wireframe","opacity","transparent","map","p","position","className","Canvas","camera","fov","performance","min","dpr","intensity","Suspense","fallback","OrbitControls","enablePan","enableZoom","autoRotate"],"sourceRoot":""}