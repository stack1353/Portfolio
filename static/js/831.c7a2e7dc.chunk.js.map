{"version":3,"file":"static/js/831.c7a2e7dc.chunk.js","mappings":"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","sources":["blog/BlogPost.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport DOMPurify from 'dompurify';\r\n\r\ntype FrontMatter = {\r\n  title: string;\r\n  date: string;\r\n  tags?: string[];\r\n};\r\n\r\ntype PostData = {\r\n  frontmatter: FrontMatter;\r\n  content: string;\r\n};\r\n\r\nconst fetchMarkdown = async (slug: string, signal: AbortSignal): Promise<PostData> => {\r\n  // For CRA, place markdown files in public/posts\r\n  const res = await fetch(`/posts/${slug}.md`, { signal });\r\n  if (!res.ok) throw new Error('Post not found');\r\n  const text = await res.text();\r\n  // very naive frontmatter parse: expects first lines between --- as YAML-like\r\n  if (text.startsWith('---')) {\r\n    const end = text.indexOf('\\n---', 3);\r\n    const fmRaw = text.slice(3, end).trim();\r\n    const content = text.slice(end + 4).trim();\r\n    const meta: any = {};\r\n    fmRaw.split('\\n').forEach((line) => {\r\n      const [k, ...rest] = line.split(':');\r\n      const v = rest.join(':').trim();\r\n      if (k === 'tags') {\r\n        meta[k] = v.replace(/\\[|\\]/g, '').split(',').map((x) => x.trim()).filter(Boolean);\r\n      } else {\r\n        meta[k.trim()] = v.replace(/^\"|\"$/g, '');\r\n      }\r\n    });\r\n    return { frontmatter: meta as FrontMatter, content };\r\n  }\r\n  return { frontmatter: { title: slug, date: '' }, content: text };\r\n};\r\n\r\nconst BlogPost: React.FC = () => {\r\n  const { slug } = useParams<{ slug: string }>();\r\n  const [data, setData] = useState<PostData | null>(null);\r\n  const [status, setStatus] = useState<'idle' | 'loading' | 'error' | 'success'>('idle');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!slug) return;\r\n    const controller = new AbortController();\r\n    setStatus('loading');\r\n    fetchMarkdown(slug, controller.signal)\r\n      .then((d) => {\r\n        setData(d);\r\n        setStatus('success');\r\n      })\r\n      .catch((e) => {\r\n        setError(e?.message || 'Failed to load');\r\n        setStatus('error');\r\n      });\r\n    return () => controller.abort();\r\n  }, [slug]);\r\n\r\n  return (\r\n    <section className=\"py-24 px-4 sm:px-6 lg:px-8 relative\">\r\n      <div className=\"absolute inset-0 overflow-hidden\">\r\n        <div className=\"absolute top-0 left-0 w-96 h-96 bg-neon-blue/10 rounded-full blur-3xl\"></div>\r\n        <div className=\"absolute bottom-0 right-0 w-80 h-80 bg-neon-purple/10 rounded-full blur-3xl\"></div>\r\n      </div>\r\n\r\n      <div className=\"max-w-3xl mx-auto relative z-10\">\r\n        <Link to=\"/blog\" className=\"text-neon-blue\">‚Üê Back to Blog</Link>\r\n        {status === 'loading' && (\r\n          <div className=\"mt-6 glass-card p-6 animate-pulse\">\r\n            <div className=\"h-8 bg-white/10 rounded w-2/3 mb-4\"></div>\r\n            <div className=\"h-4 bg-white/10 rounded w-1/3 mb-2\"></div>\r\n            <div className=\"h-4 bg-white/10 rounded w-full mb-2\"></div>\r\n            <div className=\"h-4 bg-white/10 rounded w-5/6\"></div>\r\n          </div>\r\n        )}\r\n\r\n        {status === 'error' && (\r\n          <p className=\"mt-6 text-red-400\">{error}</p>\r\n        )}\r\n\r\n        {status === 'success' && data && (\r\n          <motion.article\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5 }}\r\n            className=\"glass-card p-6\"\r\n          >\r\n            <h1 className=\"text-3xl font-bold text-white mb-2\">{data.frontmatter.title}</h1>\r\n            <p className=\"text-xs text-gray-500 mb-6\">{data.frontmatter.date}</p>\r\n            {data.frontmatter.tags && (\r\n              <div className=\"flex flex-wrap gap-2 mb-6\">\r\n                {data.frontmatter.tags.map((t) => (\r\n                  <span key={t} className=\"px-2 py-1 text-xs bg-neon-blue/10 text-neon-blue rounded-full border border-neon-blue/20\">{t}</span>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <div className=\"prose prose-invert max-w-none\">\r\n              <ReactMarkdown>{data.content}</ReactMarkdown>\r\n            </div>\r\n          </motion.article>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default BlogPost;\r\n\r\n\r\n"],"names":["BlogPost","slug","useParams","data","setData","useState","status","setStatus","error","setError","useEffect","controller","AbortController","async","signal","res","fetch","concat","ok","Error","text","startsWith","end","indexOf","fmRaw","slice","trim","content","meta","split","forEach","line","k","rest","v","join","replace","map","x","filter","Boolean","frontmatter","title","date","fetchMarkdown","then","d","catch","e","message","abort","_jsxs","className","children","_jsx","Link","to","motion","article","initial","opacity","y","animate","transition","duration","tags","t","ReactMarkdown"],"sourceRoot":""}